{"version":3,"sources":["component/Foody.jsx","component/Footer.jsx","component/App.jsx","registerServiceWorker.js","index.js"],"names":["Foody","useState","query","setQuery","includeIngredient","setIin","api","process","initialUrl","initialData","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","useEffect","a","axios","response","food","results","console","log","fetchData","useDataApi","doFetch","isExpanded","setExpanded","expand","scrollTOId","document","getElementById","scrollIntoView","behavior","onSubmit","event","preventDefault","className","type","name","onChange","target","value","autoComplete","autoCorrect","placeholder","id","onClick","Alert","severity","map","item","index","Card","key","sourceUrl","window","location","href","CardHeader","title","subheader","sourceName","CardMedia","image","CardContent","Typography","variant","color","component","readyInMinutes","servings","curryear","Date","getFullYear","Footer","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","URL","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a5a31b87.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport \"../index.css\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport Typography from '@material-ui/core/Typography';\r\n   \r\n \r\nconst useDataApi = (initialUrl, initialData) => {\r\n \r\n  const [data, setData] = useState(initialData);\r\n  const [url, setUrl] = useState(initialUrl);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n \r\n \r\n         \r\n  \r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsError(false);\r\n      setIsLoading(true);\r\n     \r\n      try {\r\n       \r\n       const response = await axios(url);\r\n        const food=await response.data;\r\n        setData(food.results);\r\n       \r\n        }\r\n      catch (error) {\r\n        setIsError(true);\r\n        console.log(error);\r\n      }\r\n \r\n      setIsLoading(false);\r\n    };\r\n \r\n    fetchData();\r\n  }, [url]);\r\n \r\n  return [{ data, isLoading, isError }, setUrl];\r\n};\r\n\r\n\r\n\r\n \r\nfunction Foody() {\r\n  \r\n  const [query, setQuery] = useState(\"\");\r\n  const [includeIngredient,setIin]=useState(\"\");\r\n  const api=process.env.REACT_APP_API_KEY;\r\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n    \"https://api.spoonacular.com/recipes/complexSearch?number=20&apiKey=\"+api+\"&addRecipeInformation=true&includeIngredients=salt,sugar\",\r\n     [] ,\r\n  );\r\n\r\n  \r\n\r\n  const [isExpanded, setExpanded] = useState(false);\r\n  function expand() {\r\n    setExpanded(!isExpanded);\r\n  }\r\n  \r\n  function showRecipe(url)\r\n  {\r\n    window.location.href=url;\r\n  }\r\n  \r\n  function scrollTOId()\r\n  {\r\n     document.getElementById('refId').scrollIntoView({\r\n       behavior:\"smooth\",\r\n     });\r\n     \r\n  }\r\n  \r\n  return (\r\n   \r\n    <Fragment>\r\n      <nav >\r\n      <form\r\n        onSubmit={event => {\r\n          query!=\"\" &&\r\n\r\n          doFetch(\r\n            'https://api.spoonacular.com/recipes/complexSearch?number=20&apiKey='+api+'&addRecipeInformation=true&query='+query ,\r\n          )\r\n          query!=\"\"&&scrollTOId();\r\n         \r\n          event.preventDefault();\r\n        \r\n        }}\r\n      >\r\n        {isExpanded===false &&\r\n               (<div className=\"container\"> \r\n               <div className=\"foodyish\">Foodyish <FastfoodIcon/></div>\r\n               <div className=\"outer\">\r\n              <input \r\n                type=\"text\"\r\n                name=\"query\"\r\n                onChange={event => {setQuery(event.target.value);\r\n                   event.preventDefault();\r\n                   }}\r\n                value={query}\r\n                autoComplete=\"off\"\r\n                autoCorrect=\"on\"\r\n                 placeholder=\"search a million recipes & more\" />\r\n                <button className=\"search-button\" type=\"submit\"><SearchIcon/></button>\r\n                <div className=\"inner\"\r\n                 id=\"ingredient search\" \r\n                 onClick={expand}>ingredient search</div>\r\n               </div>\r\n                </div>)} \r\n                 </form>\r\n \r\n               { isExpanded && \r\n              ( <form  onSubmit={event => {\r\n                includeIngredient!=\"\" &&\r\n                doFetch(\r\n                  'https://api.spoonacular.com/recipes/complexSearch?number=20&apiKey='+api+'&addRecipeInformation=true&includeIngredients='+includeIngredient ,\r\n                );\r\n                includeIngredient!=\"\" &&scrollTOId();\r\n                event.preventDefault();\r\n              }}> <div className=\"container\">\r\n                   <div className=\"foodyish\">Foodyish <FastfoodIcon/></div>\r\n              <div className=\"outer\">\r\n               <input \r\n               type=\"text\" \r\n               onChange={event=>setIin(event.target.value)} \r\n               name=\"includeIngredient\" \r\n               value={includeIngredient} \r\n               autoComplete=\"off\" \r\n               autoCorrect=\"on\"\r\n               placeholder=\"Include Ingredients seperated by comma\"/>\r\n              <button className=\"search-button\" type=\"submit\"><SearchIcon/></button>\r\n              <div className=\"inner\" \r\n              id=\"keyword search\" \r\n              onClick={expand}>keyword search</div>\r\n         </div>\r\n         </div>\r\n         </form>  ) }\r\n          </nav>\r\n        \r\n       \r\n     {isError &&  <Alert severity=\"error\">Something went wrong...!</Alert>}\r\n\r\n      {isLoading ? \r\n   <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>:\r\n   (\r\n      <div className=\"outerRoot\" id=\"refId\">\r\n           { data.map((item,index) => (\r\n             <Card className=\"innerRoot\" key={index} >\r\n\r\n            <div onClick={()=>showRecipe(item.sourceUrl)}>\r\n            \r\n             <CardHeader\r\n               title={item.title}\r\n               subheader={ \"By\"+\" \"+item.sourceName}\r\n             />\r\n             \r\n             <CardMedia\r\n               className=\"media\"\r\n               image= {item.image} \r\n               title={item.title}\r\n              \r\n             />\r\n              \r\n             <CardContent>\r\n               <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                readyInMinutes: {item.readyInMinutes}\r\n               <br/> servings: {item.servings}\r\n               </Typography>\r\n               < FavoriteIcon className=\"favourite\"  />\r\n             </CardContent>\r\n            \r\n             </div>\r\n           </Card>\r\n     \r\n       ))}\r\n       </div>\r\n       )}\r\n   \r\n      \r\n    </Fragment>\r\n  );\r\n}\r\n \r\nexport default Foody;","import React from 'react';\r\nimport \"../index.css\";\r\n\r\nconst currdate=new Date();\r\nconst curryear=currdate.getFullYear();\r\n\r\nfunction Footer(){\r\nreturn (<footer>\r\n    <p > copyright nancy © {curryear}</p>\r\n    </footer>);\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport Foody from \"./Foody\";\r\nimport Footer from \"./Footer\";\r\n//import {createStore} from \"redux\";\r\n//import {Provider} from \"react-redux\";\r\n//import FetchDataReducer from \"../reducers/FetchDataReducer\";\r\n\r\n //const store=createStore(FetchDataReducer );\r\nfunction App()\r\n{\r\n\r\n    return(\r\n        <div>\r\n      <Foody/>\r\n        <Footer/>\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./component/App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n"],"sourceRoot":""}